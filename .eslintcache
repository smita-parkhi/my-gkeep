[{"/Users/smitaparkhi/Smita/my-gkeep/src/ActivePages/Notes.jsx":"1","/Users/smitaparkhi/Smita/my-gkeep/src/TextArea/TextArea.jsx":"2","/Users/smitaparkhi/Smita/my-gkeep/src/BaseLayout/BaseLayout.component.jsx":"3","/Users/smitaparkhi/Smita/my-gkeep/src/Archive/Archive.jsx":"4","/Users/smitaparkhi/Smita/my-gkeep/src/Header/Header.jsx":"5"},{"size":3930,"mtime":1615624797473,"results":"6","hashOfConfig":"7"},{"size":2715,"mtime":1615625001213,"results":"8","hashOfConfig":"7"},{"size":2963,"mtime":1615625032863,"results":"9","hashOfConfig":"7"},{"size":612,"mtime":1615537012838,"results":"10","hashOfConfig":"7"},{"size":1810,"mtime":1615546311078,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"r1hqzp",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/smitaparkhi/Smita/my-gkeep/src/ActivePages/Notes.jsx",["23","24"],"import React, { useState, useContext, useEffect } from 'react';\nimport Card from '../card/Card'\nimport Textarea from '../TextArea/TextArea'\nimport Popup from '../PopUp/PopUp'\nimport { BaseContext } from '../Context/BaseContext'\nimport SearchResult from '../SearcgResult/SearchResult'\n\nimport './Notes.scss'\n\nexport default function Notes(props) {\n  const BaseConsumer = useContext(BaseContext);\n  //console.log(BaseConsumer)\n  const [showPopUpBox, setPopUpBox] = useState(false)\n  const [activeNote, setActiveNote] = useState(null)\n  \n // const { handleclickCallback } = props\n  // const [datas, setdatas] = useState([\n  //   {\n  //     id: 1,\n  //     title: 'First note',\n  //     description: 'first note description',\n  //     status: 'active'\n  //   },\n  //   {\n  //     id: 2,\n  //     title: 'Second note',\n  //     description: 'second note description',\n  //     status: 'pinned'\n  //   },\n  //   {\n  //     id: 3,\n  //     title: 'Third note',\n  //     description: 'third note description',\n  //     status: 'pinned'\n  //   },\n  //   {\n  //     id: 4,\n  //     title: 'Fourth note',\n  //     description: 'fourth note description',\n  //     status: 'pinned'\n  //   },\n  //   {\n  //     id: 5,\n  //     title: 'Fifth note',\n  //     description: 'fifth note description',\n  //     status: 'active'\n  //   },\n  //   {\n  //     id: 6,\n  //     title: 'Sixth note',\n  //     description: 'sixth note description',\n  //     status: 'active'\n  //   }\n  // ]);\n\n  const handlePinClick = (note) => {\n    var clonedArray = JSON.parse(JSON.stringify((BaseConsumer.searchText)))\n    for (var index = 0; index < clonedArray.length; index++) {\n      if (note.id === clonedArray[index].id) {\n        console.log(\"true\");\n        if (note.status === 'pinned') {\n          clonedArray[index].status = \"active\"\n        } else {\n          clonedArray[index].status = \"pinned\"\n        }\n        ((BaseConsumer.setSearchText)(clonedArray))\n      }\n    }\n  }\n\n  const handleUpdateNote = (updatedNote) => {\n    let clonedArray = JSON.parse(JSON.stringify((BaseConsumer.searchText)))\n    for (var index = 0; index < clonedArray.length; index++) {\n      if (updatedNote.id === clonedArray[index].id) {\n        clonedArray[index] = updatedNote;\n        ((BaseConsumer.setSearchText)(clonedArray))\n      }\n    }\n  }\n\n  const togglehandleClick = (newNote) => {\n    let clonedArray = JSON.parse(JSON.stringify(BaseConsumer.searchText))\n    clonedArray.push(newNote);\n    ((BaseConsumer.setSearchText)(clonedArray))\n    //handleclickCallback(newNote)\n  }\n\n  const handleNoteClick = (note) => {\n    setPopUpBox(true)\n    setActiveNote(note)\n  }\n  const handlePopUpBox = () => {\n    setPopUpBox(false)\n  }\n\n  return (\n    <div className='component-container' >\n      <div className='textarea_input'>\n        <Textarea\n           handleClickOutsideCallBack={(newNote) => togglehandleClick(newNote)}\n        />\n      </div>\n\n      <h1 className='heading'>Pinned</h1>\n      <div className='card_item'>\n        {(BaseConsumer.searchText).filter(datas => datas.status === \"pinned\").map(note => <Card\n          note={note}\n          key={note.id}\n           pinClickHandleCallback={(note) => handlePinClick(note)}\n           noteClickCallback={(note) => handleNoteClick(note)}\n        />)}\n      </div>\n\n      <h1 className='heading'>Others</h1>\n      <div className='card_item'>\n        {(BaseConsumer.searchText).filter(datas => datas.status === \"active\").map(note => <Card\n          key={note.id}\n          note={note}\n          pinClickHandleCallback={(note) => handlePinClick(note)}\n           noteClickCallback={(note) => handleNoteClick(note)}\n        />)}\n      </div>\n\n      <div className='popup-class'>\n        {showPopUpBox ? <Popup\n          note={activeNote}\n           updateNoteCallback={(updatedNote) => handleUpdateNote(updatedNote)}\n           popUpBoxCallBack={() => handlePopUpBox()}\n        /> : null}\n      </div>\n\n    </div>\n  );\n};","/Users/smitaparkhi/Smita/my-gkeep/src/TextArea/TextArea.jsx",["25","26","27","28"],"/Users/smitaparkhi/Smita/my-gkeep/src/BaseLayout/BaseLayout.component.jsx",["29","30","31"],"/Users/smitaparkhi/Smita/my-gkeep/src/Archive/Archive.jsx",["32"],"/Users/smitaparkhi/Smita/my-gkeep/src/Header/Header.jsx",["33"],{"ruleId":"34","severity":1,"message":"35","line":1,"column":39,"nodeType":"36","messageId":"37","endLine":1,"endColumn":48},{"ruleId":"34","severity":1,"message":"38","line":6,"column":8,"nodeType":"36","messageId":"37","endLine":6,"endColumn":20},{"ruleId":"34","severity":1,"message":"39","line":1,"column":8,"nodeType":"36","messageId":"37","endLine":1,"endColumn":13},{"ruleId":"40","severity":1,"message":"41","line":48,"column":51,"nodeType":"42","messageId":"43","endLine":48,"endColumn":53},{"ruleId":"44","severity":1,"message":"45","line":48,"column":67,"nodeType":"42","messageId":"46","endLine":48,"endColumn":68},{"ruleId":"44","severity":1,"message":"45","line":48,"column":73,"nodeType":"42","messageId":"46","endLine":48,"endColumn":74},{"ruleId":"34","severity":1,"message":"47","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":30},{"ruleId":"34","severity":1,"message":"48","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":13},{"ruleId":"34","severity":1,"message":"49","line":13,"column":17,"nodeType":"36","messageId":"37","endLine":13,"endColumn":25},{"ruleId":"34","severity":1,"message":"50","line":8,"column":11,"nodeType":"36","messageId":"37","endLine":8,"endColumn":23},{"ruleId":"34","severity":1,"message":"51","line":6,"column":37,"nodeType":"36","messageId":"37","endLine":6,"endColumn":56},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'SearchResult' is defined but never used.","'react' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&' and '|'.","unexpectedMixedOperator","'createContext' is defined but never used.","'Notes' is defined but never used.","'setdatas' is assigned a value but never used.","'BaseConsumer' is assigned a value but never used.","'searchValueCallback' is assigned a value but never used."]